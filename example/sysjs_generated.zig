// Generated by `zig build`; DO NOT EDIT.


const builtin = @import("builtin");



pub const console = struct {

    extern fn sysjs_console_log(string: [*]const u8, string_len: u32) void;
    pub inline fn log(string: []const u8) void {
        sysjs_console_log(string.ptr, string.len);
    }
    extern fn sysjs_console_log2(string: [*]const u8, string_len: u32, [*]const u8, u32) void;
    pub inline fn log2(string: []const u8, v1: []const u8) void {
        sysjs_console_log2(string.ptr, string.len, v1.ptr, v1.len);
    }
};

pub const TextDecoder = struct {
    id: u32,

    extern fn sysjs_TextDecoder_new() u32;
    pub inline fn new() TextDecoder {
        return TextDecoder{.id = sysjs_TextDecoder_new()};
    }
    extern fn sysjs_TextDecoder_decode(td: u32, str: [*]const u8, str_len: u32) u32;
    pub inline fn decode(td: TextDecoder, str: []const u8) String {
        return String{.id = sysjs_TextDecoder_decode(td.id, str.ptr, str.len)};
    }
};

pub const String = struct {
    id: u32,

    extern fn sysjs_String_new(buf: [*]const u8, buf_len: u32) u32;
    pub inline fn new(buf: []const u8) String {
        return String{.id = sysjs_String_new(buf.ptr, buf.len)};
    }
    extern fn sysjs_String_charAt(string: u32, index: u32) u8;
    pub inline fn charAt(string: String, index: u32) u8 {
        return sysjs_String_charAt(string.id, index);
    }
};

pub const SomeClass = struct {

    extern fn sysjs_SomeClass_someFunc(str: CTestingValueStructs, return_val: CInternalStruct) void;
    pub inline fn someFunc(str: CTestingValueStructs) CInternalStruct {
        var return_val: CInternalStruct = undefined;
        sysjs_SomeClass_someFunc(str, &return_val);
        return return_val;
    }
};

pub const TestingValueStructs = struct {
    index: u32,
    name: []const u8,
    is_test: bool,
    value: InternalStruct,
    a_val: f16,

    pub fn toExtern(s: TestingValueStructs) CTestingValueStructs {
        return CTestingValueStructs{
            .index = s.index,
            .name = s.name.ptr, .name_len = s.name.len,
            .is_test = s.is_test,
            .value = s.value.toExtern(),
            .a_val = s.a_val,
        };
    }
};

pub const CTestingValueStructs = extern struct {
    index: u32,
    name: [*]const u8, name_len: u32,
    is_test: bool,
    value: CInternalStruct,
    a_val: f32,

};

pub const InternalStruct = struct {
    idx: u32,
    any: f64,

    pub fn toExtern(s: InternalStruct) CInternalStruct {
        return CInternalStruct{
            .idx = s.idx,
            .any = s.any,
        };
    }
};

pub const CInternalStruct = extern struct {
    idx: u32,
    any: f64,

};
pub fn doPrint() void {
    // use console.log
    console.log("zig:js.console.log(\"hello from Zig\")");
}
